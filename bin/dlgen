#!/usr/bin/php
<?php
//----------------------------------------------------------------------------------------------------------------------
use SetBased\DataLayer\Generator\MySqlConfigConstants;
use SetBased\DataLayer\Generator\MySqlRoutineLoader;
use SetBased\DataLayer\Generator\MySqlRoutineWrapperGenerator;

//----------------------------------------------------------------------------------------------------------------------
$files = array(__DIR__.'/../vendor/autoload.php',
               __DIR__.'/../../vendor/autoload.php',
               __DIR__.'/../../../vendor/autoload.php',
               __DIR__.'/../../../../vendor/autoload.php' );

foreach ($files as $file)
{
  if (file_exists( $file ))
  {
    require $file;
    break;
  }
}

//----------------------------------------------------------------------------------------------------------------------
/**
 * Throws an exception. Arguments similar to @c printf.
 */
function set_assert_failed()
{
  $args    = func_get_args();
  $format  = array_shift( $args );
  $message = vsprintf( $format,  $args );

  throw new Exception( $message );
}

//----------------------------------------------------------------------------------------------------------------------
function synopsis()
{
  echo "Synopsis: dlgen [-f] -c <configuration file> [routine.psql] ... \n";
  echo "          dlgen -h\n";

  exit( 1 );
}

//----------------------------------------------------------------------------------------------------------------------
function getSetting( $options )
{
  // skip first key with current file name.
  array_shift( $options );
  $setting['psql_files'] = array();
  while (($param = array_shift( $options ))!==null)
  {
    switch ($param)
    {
    case '-f':
    case '--fast':
      $setting['fast'] = true;
      break;

    case '-c':
    case '--config':
      $setting['config'] = array_shift( $options );
      break;

    case '-h':
    case '--help':
      synopsis();
      break;

    default:
      $n = preg_match( '([A-Za-z0-9\_/]+.psql)', $param, $regs );
      if ($n===false) set_assert_failed( 'Internal error.' );
      if ($n==1)
      {
        $setting['psql_files'][]= $regs[0];
      }
      else
      {
        synopsis();
      }
      break;
    }
  }

  if (!isset($setting['config'])) synopsis();

  return $setting;
}

//----------------------------------------------------------------------------------------------------------------------
function main( $options )
{
  $setting = getSetting( $options );

  if (isset($setting['fast']))
  {
    // Fast mode: only load stored routines.
    $loader = new MySqlRoutineLoader;
    $ret = $loader->run( $setting['config'], $setting['psql_files'] );
    if ($ret!=0) exit( $ret );
  }
  else
  {
    // Normal mode: create constants, config file, load routines, and create routine wrapper class.
    $constants = new MySqlConfigConstants;
    $ret = $constants->run( $setting['config'] );
    if ($ret!=0) exit( $ret );

    $loader = new MySqlRoutineLoader;
    $ret = $loader->run( $setting['config'], $setting['psql_files'] );
    if ($ret!=0) exit( $ret );

    $wrapper = new MySqlRoutineWrapperGenerator;
    $ret = $wrapper->run( $setting['config'] );
    if ($ret!=0) exit( $ret );
  }

  exit( 0 );
}

//----------------------------------------------------------------------------------------------------------------------
main( $argv );
