#!/usr/bin/php
<?php
//----------------------------------------------------------------------------------------------------------------------
/** Throws an execption. Arguments similair to printf.
 */
function set_assert_failed()
{
  $args    = func_get_args();
  $format  = array_shift( $args );
  $message = vsprintf( $format,  $args );

  throw new Exception( $message );
}

//----------------------------------------------------------------------------------------------------------------------
/** @brief Klasse met wrapper functies voor alle stored procedures die aangeroepen mogen worden door PHP-code.
 */
class SET_DL
{
  /** Referentie naar een mysqli object (zie Connect) dat gebruikt wordt voor het afvuren van alle SQL satements in
   *  deze klasse.
   */
  private static $ourMySql;

  //--------------------------------------------------------------------------------------------------------------------
  /** Werpt een excptie met de huidige error code en beschrijving van $ourMySql.
   */
  private static function ThrowSqlError( $theText )
  {
    $message  = "MySQL Error no: ".self::$ourMySql->errno."\n";
    $message .= self::$ourMySql->error;
    $message .= "\n";
    $message .= $theText."\n";

    throw new Exception( $message );
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Wrapper om mysqli::query. Indien de call naar mysqli::query mislukt wordt een een exceptie geworpen.
   */
  private static function Query( $theQuery )
  {
    $ret = self::$ourMySql->query( $theQuery );
    if ($ret===false) self::ThrowSqlError( $theQuery );

    return $ret;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Wrapper om mysqli::real_query. Indien de call naar mysqli::real_query mislukt wordt een een exceptie geworpen.
   */
  private static function RealQuery( $theQuery )
  {
    $tmp = self::$ourMySql->real_query( $theQuery );
    if ($tmp===false) self::ThrowSqlError( $theQuery );
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Start een transactie in MySQL.
   */
  public static function Begin()
  {
    $ret = self::$ourMySql->autocommit(false);
    if (!$ret) self::ThrowSqlError( 'autocommit' );
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Commit de huidige transactie in MySQL.
   */
  public static function Commit()
  {
    $ret = self::$ourMySql->commit();
    if (!$ret) self::ThrowSqlError( 'commit' );
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Connecteert naar de MySQL server (parameters @a $theHostName, @a $theUserName, @a $thePassWord en @a $theDatabase)
   *  en voert een aantal initialisaties uit.
   */
  public static function Connect( $theHostName, $theUserName, $thePassWord, $theDatabase )
  {
    self::$ourMySql = new mysqli( $theHostName, $theUserName, $thePassWord, $theDatabase );
    if (!self::$ourMySql) self::ThrowSqlError( 'init' );

    $ret = self::$ourMySql->options(MYSQLI_OPT_CONNECT_TIMEOUT, 600);
    if (!$ret) self::ThrowSqlError( 'options' );

    $ret = self::$ourMySql->set_charset("utf8");
    if (!$ret) self::ThrowSqlError( 'set_charset' );
    /*
    $ret = self::ExecuteNone( "set sql_mode = '".SET_SQL_MODE."'");

    // The default transaction level is REPEATABLE-READ. Set transaction level to READ-COMMITED.
    self::ExecuteNone( "SET tx_isolation = 'READ-COMMITTED'" );

    // Disable query caching.
    self::ExecuteNone( "set query_cache_type = 0" );*/
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Indien er een verbinding is met een MySQL server, verbreekt de verbinding.
   */
  public static function Disconnect()
  {
    if (self::$ourMySql)
    {
      self::$ourMySql->close();
      self::$ourMySql = null;
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Voert query @a $theQuery uit. @a $theQuery mag 0 of meer rijen teruggeven.
   */
  public function ExecuteRows( $theQuery )
  {
    $result = self::Query( $theQuery );
    $ret = array();
    while($row = $result->fetch_array( MYSQLI_ASSOC )) $ret[] = $row;
    $result->close();

    self::$ourMySql->next_result();

    return $ret;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Voert query @a $theQuery uit een geeft het aantal "affected rows" terug. @a $theQuery mag geen rijen teruggeven.
   */
  public function ExecuteNone( $theQuery )
  {
    self::Query( $theQuery );

    $n = self::$ourMySql->affected_rows;

    self::$ourMySql->next_result();

    return $n;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Voert query @a $theQuery uit. De query mag een multi query zijn (b.v. een store procedure) en de output van de
   *  query wordt gelogt.
   */
  public static function ExecuteEcho( $theQuery )
  {
    $ret = self::$ourMySql->multi_query( $theQuery );
    if (!$ret) self::ThrowSqlError( $theQuery );
    do
    {
      $result = self::$ourMySql->store_result();
      if (self::$ourMySql->errno) self::ThrowSqlError( '$mysqli->store_result failed for \''.$theQuery.'\'' );
      if ($result)
      {
        $fields = $result->fetch_fields();
        while ($row = $result->fetch_row())
        {
          $line = '';
          foreach( $row as $i => $field )
          {
            if ($i>0) $line .= ' ';
            $line .= str_pad( $field, $fields[$i]->max_length );
          }
          etl_log( $line );
        }
        $result->free();
      }
    }
    while (self::$ourMySql->next_result());
    if (self::$ourMySql->errno) self::ThrowSqlError( '$mysqli->next_result failed for \''.$theQuery.'\'' );
  }

  //--------------------------------------------------------------------------------------------------------------------
}

//----------------------------------------------------------------------------------------------------------------------
/** @brief Class for loading stored routine into a MySQL instance from pseudo SQL files (.psql).
 */
class SET_RoutineLoader
{
  /** @name Settings
     @{
     Properties for settings.
  */

  /** Path where .psql files can be found.
  */
  private $myIncludePath;

  /** The name of the file with SQL statement to retreive table and column names, and column types.
   */
  private $mySqlColumnTypeFileName;

  /** The SQL mode under which the stored routine will be loaded and run.
   */
  private $mySqlMode;

  /** The default character set under which the stored routine will be loaded and run.
   */
  private $myCharacterSet;

  /** The default collate under which the stored routine will be loaded and run.
   */
  private $myCollate;

  /** The name of the configuration file of the target porject
   */
  private $myTargetConfigFileName;
  /** @} */


  /** @name Overall
     @{
     Properties with data about all stored routines and .psql files.
   */

  /** An array with all found .psql files.
   */
  private $myPsqlFileNames = array();

  /** The filename of the file with the metadata of all stored routines.
   */
  private $myMetadataFilename;

  /** Array with the metadata of all stored routines.
   */
  private $myMetadata = array();

  /** A map from placeholders to their actual values.
   */
  private $myReplacePairs = array();

  /** An array with psql filenames that are not loaded into MySQL.
   */
  private $myErrorFileNames = array();

  /** Information about old routines.
   */
  private $myOldRoutines;
  /** @} */


  /** @name Current
     @{
     Properties with data about the current stored routine and/or .psql file.
  */
  /** The current .psql filename.
   */
  private $myCurrentPsqlFileName;

  /** The source code as a single string of the current .psql file.
   */
  private $myCurrentPsqlSourceCode;

  /** The source code as an array of lines string of the current .psql file.
   */
  private $myCurrentPsqlSourceCodeLines;

  /** The placeholders in the current .psql file.
   */
  private $myCurrentPlaceholders;

  /** The designation type of the stored routine in the current .psql file.
   */
  private $myCurrentType;

  /** The routine type (i.e. procedure or function) of the stored routine in the current .psql file.
   */
  private $myCurrentRoutineType;

  /** The name of the stored routine in the current .psql file.
   */
  private $myCurrentRoutineName;

  /** The key or index columns (depending on the designation type) of the stored routine in the current .psql file.
   */
  private $myCurrentColumns;

  /** The last modification time of the current .psql file.
   */
  private $myCurrentMtime;

  /** The replace pairs (i.e. placeholders and their actual values, see strst) for the current .psql file.
   */
  private $myCurrentReplace;

  /** The old metadata of the current .psql file.
   */
  private $myCurrentOldMetadata;
  /** @} */

  //--------------------------------------------------------------------------------------------------------------------
  /** Returns the value of a setting.
      @param $theSettings      The settings as returned by @c parse_ini_file.
      @param $theMandatoryFlag If set and setting @a $theSettingName is not found in section @a $theSectionName an
                               exception will be thrown.
      @param $theSectionName   The name of the section of the requested setting.
      @param $theSettingName   The name of the setting of the requested setting.
   */
  private function GetSetting( $theSettings, $theMandatoryFlag, $theSectionName, $theSettingName )
  {
    // Test if the section exists.
    if (!array_key_exists( $theSectionName, $theSettings ))
    {
      if ($theMandatoryFlag)
      {
        set_assert_failed( "Section '%s' not found in configuration file.", $theSectionName );
      }
      else
      {
        return null;
      }
    }

    // Test if the setting in the section exists.
    if (!array_key_exists( $theSettingName, $theSettings[$theSectionName] ))
    {
      if ($theMandatoryFlag)
      {
        set_assert_failed( "Setting '%s' not found in section '%s' configuration file.", $theSettingName, $theSectionName );
      }
      else
      {
        return null;
      }
    }

    return $theSettings[$theSectionName][$theSettingName];
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Reads parameters from configuration @a $theConfigFileName
   */
  private function ReadConfigFile( $theConfigFileName )
  {
    $settings = parse_ini_file( $theConfigFileName, true );
    if ($settings===false) set_assert_failed( "Unable open configuration file" );

    $this->myMetadataFilename      = $this->GetSetting( $settings, true,  'wrapper', 'metadata');
    $this->myIncludePath           = $this->GetSetting( $settings, true,  'loader',  'psql' );
    $this->mySqlColumnTypeFileName = $this->GetSetting( $settings, true,  'loader',  'column_types_sql' );
    $this->myTargetConfigFileName  = $this->GetSetting( $settings, false, 'loader',  'config' );
    $this->mySqlMode               = $this->GetSetting( $settings, true,  'loader',  'sql_mode');
    $this->myCharacterSet          = $this->GetSetting( $settings, true,  'loader',  'character_set' );
    $this->myCollate               = $this->GetSetting( $settings, true,  'loader',  'collate' );
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Reads constants set in @c myTargetConfigFileName and adds them to @c myReplacePairs.
   */
  private function GetConstants()
  {
    // If myTargetConfigFileName is not set return immediatly.
    if (!isset($this->myTargetConfigFileName)) return;

    if (!is_readable( $this->myTargetConfigFileName )) set_assert_failed( "Configuration file is not readable '%s'.",
                                                                           $this->myTargetConfigFileName );

    require_once( $this->myTargetConfigFileName );
    $constants    = get_defined_constants(true);
    $user_defined = $constants['user'];

    foreach( $user_defined as $name => $value )
    {
      if (!is_numeric( $value )) $value = "'$value'";

      $this->myReplacePairs['@'.$name.'@'] = $value;
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Searches recursively for all .psql files under directory @p $theSourceDir.
   */
  private function FindPsqlFiles( $theSourceDir=null )
  {
    if($theSourceDir===null) $theSourceDir = $this->myIncludePath;

    $psql_file_names = glob( "$theSourceDir/*.psql" );
    foreach( $psql_file_names as $psql_file_name )
    {
      $base_name = basename( $psql_file_name, '.psql' );
      if (!isset($this->myPsqlFileNames[$base_name]))
      {
        $this->myPsqlFileNames[$base_name] = $psql_file_name;
      }
      else
      {
        echo sprintf( "Error: Files '%s' and '%s' have the same basename.\n",
                      $this->myPsqlFileNames[$base_name],
                      $psql_file_name );
        $this->myErrorFileNames[] = $psql_file_name;
      }
    }

    $file_names = scandir( $theSourceDir );
    $dir_names = array();
    foreach( $file_names as $file_name )
    {
      if (is_dir( $theSourceDir.'/'.$file_name ))
      {
        if ($file_name!='.' && $file_name!='..')
        {
          $dir_names[] = $theSourceDir.'/'.$file_name;
        }
      }
    }

    foreach( $dir_names as $dir_name )
    {
      $this->FindPsqlFiles( $dir_name );
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Returns the metadata @a myMetadata of stored routines stored in file.
   */
  private function ReadRoutineMetaData()
  {
    $this->myMetadata = array();

    if (file_exists( $this->myMetadataFilename ))
    {
      $handle = fopen( $this->myMetadataFilename, 'r' );
      if ($handle===null) set_assert_failed( "Unable to open file '%s'.", $this->myMetadataFilename );

      // Skip header row.
      fgetcsv( $handle );

      while (($row = fgetcsv( $handle ))!==false)
      {
        $this->myMetadata[$row[0]] = array( 'routine_name'   => $row[0],
                                            'type'           => $row[1],
                                            'argument_types' => $row[2],
                                            'columns'        => $row[3],
                                            'timestamp'      => $row[4],
                                            'replace'        => $row[5] );
      }

      $err = fclose( $handle );
      if ($err===false) set_assert_failed( "Error closing file '%s'.", $this->myMetadataFilename );
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Writes the stored routines metadata @c myMetadatae to file @c myMetadataFilename.
   */
  private function WriteRoutineMetadata()
  {
    $handle = fopen( $this->myMetadataFilename, 'w' );
    if ($handle===false) set_assert_failed( "Unable to open file '%s'.", $this->myMetadataFilename );

    $header = array( 'routine_name', 'type', 'argument_types', 'columns', 'timestamp', 'replace' );
    $n = fputcsv( $handle, $header  );
    if ($n===false) set_assert_failed( "Error writing file '%s'.", $this->myMetadataFilename );

    $ok = ksort( $this->myMetadata );
    if ($ok===false) set_assert_failed( 'Internal error.' );

    foreach( $this->myMetadata as $routine_propertys )
    {
      $n = fputcsv( $handle, $routine_propertys );
      if ($n===false) set_assert_failed( "Error writing file '%s'.", $this->myMetadataFilename );
    }

    $err = fclose( $handle );
    if ($err===false) set_assert_failed( "Error closing file '%s'.", $this->myMetadataFilename );
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Exracts the placeholders from the current psql file and stored them in @c myCurrentPlaceholders.
      Returns @c true if all placeholders are defined, @c false otherwise.
  */
  private function GetCurrentPlaceholders()
  {
    $err = preg_match_all( "(@[A-Za-z0-9\_\.]+(\%type)?@)", $this->myCurrentPsqlSourceCode, $matches );
    if ($err===false) set_assert_failed( 'Internal error.' );

    $ret = true;
    $this->myCurrentPlaceholders = array();

    if (!empty($matches[0]))
    {
      foreach( $matches[0] as $placeholder )
      {
        if (!isset($this->myReplacePairs[strtoupper( $placeholder )]))
        {
          echo sprintf( "Error: Unknown placeholder '%s' in file '%s'.\n", $placeholder, $this->myCurrentPsqlFileName );
          $ret = false;
        }

        if (!isset($this->myCurrentPlaceholders[$placeholder]))
        {
          $this->myCurrentPlaceholders[$placeholder] = $placeholder;
        }
      }
    }

    if ($ret===true)
    {
      foreach( $this->myCurrentPlaceholders as $placeholder )
      {
        $this->myCurrentReplace[$placeholder] = $this->myReplacePairs[strtoupper( $placeholder )];
      }
      $ok = ksort( $this->myCurrentReplace );
      if ($ok===false) set_assert_failed( 'Internal error.' );
    }

    return $ret;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Extracts the designation type of the current stored routine and sets @c myCurrentType and @c myCurrentColumns.
      Returns @c true on success. Otherwise returns @c false.
   */
  private function GetCurrentType()
  {
    $ret = true;
    $key = array_search( 'begin', $this->myCurrentPsqlSourceCodeLines );

    if ($key!==false)
    {
      $n = preg_match( "/^\s*--\s+type:\s*(\w+)\s*([a-zA-Z0-9_,]+)?\s*/", $this->myCurrentPsqlSourceCodeLines[$key-1], $matches );
      if ($n===false) set_assert_failed( "Internal error." );

      if ($n==1)
      {
        $this->myCurrentType = $matches[1];
        if (isset($matches[2]))
        {
          $this->myCurrentColumns = $matches[2];
        }
      }
      else
      {
        $ret = false;
      }
    }
    else
    {
      $ret = false;
    }

    if ($ret===false)
    {
      echo sprintf( "Error: Unable to find the desgination type of the stored routine in file '%s'.",
                    $this->myCurrentPsqlFileName );
    }

    return $ret;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Extracts the name of the stored routine and the stored routine type (i.e. procedure or function) and sets
      @c myCurrentRoutineType and @c myCurrentRoutineName. Returns @c true on success. Otherwise returns @c false.

      @todo Skip comments and string literals.
   */
  private function GetCurrentName()
  {
    $ret = true;

    $n = preg_match( "/create\s+(procedure|function)\s+([a-zA-Z0-9_]+)/i", $this->myCurrentPsqlSourceCode, $matches );
    if ($n===false) set_assert_failed( 'Internal error.' );

    if ($n==1)
    {
      $this->myCurrentRoutineType = strtolower( $matches[1] );

      if ($this->myCurrentRoutineName!=$matches[2])
      {
        echo sprintf( "Error: Stored routine name '%s' does not match filename in file '%s'.\n",
                      $this->myCurrentRoutineName,
                      $this->myCurrentPsqlFileName );
        $ret = false;
      }
    }
    else
    {
      $ret = false;
    }

    if (!isset($this->myCurrentRoutineType))
    {
      echo sprintf( "Error: Unable to find the stored routine name and type in file '%s'.\n",
                    $this->myCurrentPsqlFileName );
    }

    return $ret;
  }
  //--------------------------------------------------------------------------------------------------------------------
  /** Drops the current routine if it exists.
   */
  private function DropCurrentRoutine()
  {
    if (isset($this->myOldRoutines[$this->myCurrentRoutineName]))
    {
      $sql = sprintf( "drop %s if exists %s",
                      $this->myOldRoutines[$this->myCurrentRoutineName]['routine_type'],
                      $this->myCurrentRoutineName );

      SET_DL::ExecuteNone( $sql );
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  private function LoadCurrentPsqlFile()
  {
    echo sprintf( "Loading %s %s\n",
                  $this->myCurrentRoutineType,
                  $this->myCurrentRoutineName );

    $sql_source = strtr( $this->myCurrentPsqlSourceCode , $this->myCurrentReplace );

    // Drop the stored procedure or function if its exists.
    $this->DropCurrentRoutine();

    // Set the SQL-mode under which the stored routine will run.
    $sql = sprintf( "set sql_mode ='%s'", $this->mySqlMode );
    SET_DL::ExecuteNone( $sql );

    // Set the default charaacter set and collate under which the store routine will run.
    $sql = sprintf( "set names '%s' COLLATE '%s'", $this->myCharacterSet, $this->myCollate );
    SET_DL::ExecuteNone( $sql );

    // Load the stored routine into MySQL.
    SET_DL::ExecuteNone( $sql_source );
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Returns @c true if the current .psql file must be load or reloaded. Otherwise returns @c false.
   */
  private function GetCurrentMustReload()
  {
    // If this is the first time we see the current .psql file is must be loaded.
    if (!isset($this->myCurrentOldMetadata)) return true;

    // If the .psql has changed the current .psql file is must be loaded.
    if ($this->myCurrentOldMetadata['timestamp']!=$this->myCurrentMtime) return true;

    // Get the old replace pairs
    $old_replace_pairs = unserialize( $this->myCurrentOldMetadata['replace'] );
    if ($old_replace_pairs===false)
    {
      set_assert_failed( "Unable to unserialize replcae pairs for stored routine '%s'.", $this->myCurrentRoutineName );
    }

    // If the value of placeholder has changed the current .psql file is must be loaded.
    foreach( $old_replace_pairs as $place_holder => $old_value )
    {
      if (!isset($this->myReplacePairs[strtoupper( $place_holder )]) ||
           $this->myReplacePairs[strtoupper( $place_holder )]!==$old_value) return true;
    }

    // If current routine is not exist in database .psql file is must be loaded.
    if (!isset($this->myOldRoutines[$this->myCurrentRoutineName])) return true;

    // If current sql-mode different to set in current routine, .psql file is must reload.
    if ($this->myOldRoutines[$this->myCurrentRoutineName]['sql_mode']!=$this->mySqlMode) return true;

    // If current character different to set in current routine, .psql file is must reload.
    if ($this->myOldRoutines[$this->myCurrentRoutineName]['character_set_client']!=$this->myCharacterSet) return true;

    // If current collation different to set in current routine, .psql file is must reload.
    if ($this->myOldRoutines[$this->myCurrentRoutineName]['collation_connection']!=$this->myCollate) return true;


    return false;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Loads the stored routine in file @c myCurrentPsqlFileName into MySQL.
      Returns @c true on success, @c false otherwise.
   */
  private function LoadPsqlFile()
  {
    $this->myCurrentRoutineName         = null;
    $this->myCurrentPsqlSourceCode      = null;
    $this->myCurrentPsqlSourceCodeLines = null;
    $this->myCurrentPlaceholders        = null;
    $this->myCurrentType                = null;
    $this->myCurrentRoutineType         = null;
    $this->myCurrentRoutineName         = null;
    $this->myCurrentColumns             = null;
    $this->myCurrentMtime               = null;
    $this->myCurrentReplace             = null;

    try
    {
      // We assume that the basename of the .psql file and routine name are equal.
      $this->myCurrentRoutineName = basename( $this->myCurrentPsqlFileName, '.psql' );

      // Save old metadata.
      $this->myCurrentOldMetadata = (isset($this->myMetadata[$this->myCurrentRoutineName])) ? $this->myMetadata[$this->myCurrentRoutineName] : null;

      // Get mtime of the source file.
      $this->myCurrentMtime = filemtime( $this->myCurrentPsqlFileName );
      if ($this->myCurrentMtime===false) set_assert_failed( "Unable to get mtime of file '%s'.", $this->myCurrentPsqlFileName );

      // Load the stored routine into MySQL only if the source has changed or the value of a placeholder.
      $load = $this->GetCurrentMustReload();
      if ($load)
      {
        // Read the psql source code.
        $this->myCurrentPsqlSourceCode = file_get_contents( $this->myCurrentPsqlFileName );
        if ($this->myCurrentPsqlSourceCode===false)
        {
          set_assert_failed( "Unable to read file '%s'.", $this->myCurrentPsqlFileName );
        }

        // Split the psql source code into lines.
        $this->myCurrentPsqlSourceCodeLines =  explode( "\n", $this->myCurrentPsqlSourceCode );
        if ($this->myCurrentPsqlSourceCodeLines===false) return false;

        // Extract placeholders from the psql source code.
        $ok = $this->GetCurrentPlaceholders( $this->myCurrentPsqlSourceCode, $this->myCurrentPsqlFileName );
        if ($ok===false) return false;

        // Extract the designation type and key or index columns from the psql source code.
        $ok = $this->GetCurrentType();
        if ($ok===false) return false;

        // Extract the routine type (procedure or function) and routine name from the psql source code.
        $ok = $this->GetCurrentName();
        if ($ok===false) return false;

        // Load the routine into MySQL.
        $this->LoadCurrentPsqlFile();

        // Update curent Metadata;
        $this->UpdateCurentMetadata();
      }

      return true;
    }
    catch (Exception $e)
    {
      echo $e->getMessage();

      $this->myErrorFileNames[] = $this->myCurrentPsqlFileName;

      return false;
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Selects schema, table, and colum names and the column type from the MySQL and the column type placeholders
      to @c myReplacePairs.
   */
  private function GetColumnTypes()
  {
    $query = file_get_contents( $this->mySqlColumnTypeFileName );
    if ($query===false) set_assert_failed( "Unable to read file '%s'.", $this->mySqlColumnTypeFileName );

    $rows = SET_DL::ExecuteRows( $query );

    foreach( $rows as $row )
    {
      $key = '@';
      if (isset($row['table_schema'])) $key .= $row['table_schema'].'.';
      $key .= $row['table_name'].'.'.$row['column_name'].'%type@';
      $key = strtoupper( $key );

      $value = $row['column_type'];
      if (isset($row['character_set_name'])) $value .= ' character set '.$row['character_set_name'];

      $this->myReplacePairs[$key] = $value;
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Update metadata for current .psql if it exist, otherwise drop current metadata.
   */
  private function UpdateCurentMetadata()
  {
    $query  = sprintf( "
select group_concat( t2.data_type order by t2.ordinal_position separator ',' ) 'arguments'
from            information_schema.ROUTINES   t1
left outer join information_schema.PARAMETERS t2  on  t2.specific_schema = t1.routine_schema and
                                                      t2.specific_name   = t1.routine_name
where t1.routine_schema = database()
and   t1.routine_name   = '%s'", $this->myCurrentRoutineName );

    $tmp = SET_DL::ExecuteRows( $query );  /** @todo replace with execute singleton */
    $argument_types = $tmp[0]['arguments'];

    $this->myMetadata[$this->myCurrentRoutineName]['routine_name']   = $this->myCurrentRoutineName;
    $this->myMetadata[$this->myCurrentRoutineName]['type']           = $this->myCurrentType;
    $this->myMetadata[$this->myCurrentRoutineName]['argument_types'] = $argument_types;
    $this->myMetadata[$this->myCurrentRoutineName]['columns']        = $this->myCurrentColumns;
    $this->myMetadata[$this->myCurrentRoutineName]['timestamp']      = $this->myCurrentMtime;
    $this->myMetadata[$this->myCurrentRoutineName]['replace']        = serialize( $this->myCurrentReplace );
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Remove obsolete entries from metadata.
   */
  private function RemoveObsoleteMetadata()
  {
    foreach ( $this->myPsqlFileNames as $myPsqlFileName )
    {
      $tmp = basename( $myPsqlFileName, '.psql' );
      if (isset($this->myMetadata[$tmp])) $clen[$tmp] = $this->myMetadata[$tmp];
    }
    $this->myMetadata = $clen;
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Get information about all stored routinesin MySQL.
   */
  private function GetOldRoutines()
  {
    $query = "
select routine_name
,      routine_type
,      sql_mode
,      character_set_client
,      collation_connection
from  information_schema.ROUTINES
where ROUTINE_SCHEMA = database()
order by routine_name";

    $rows = SET_DL::ExecuteRows( $query );

    $this->myOldRoutines = array();
    foreach( $rows as $row )
    {
      $this->myOldRoutines[$row['routine_name']] = $row;
    }
  }
<<<<<<< HEAD

  //--------------------------------------------------------------------------------------------------------------------
  /** Drops the current routine if it exists.
   */
  private function DropCurrentRoutine()
  {
    if (isset($this->myOldRoutines[$this->myCurrentRoutineName]))
    {
      $sql = sprintf( "drop %s if exists %s",
                      $this->myOldRoutines[$this->myCurrentRoutineName]['routine_type'],
                      $this->myCurrentRoutineName );

     SET_DL::ExecuteNone( $sql );
    }
  }
=======

>>>>>>> 4438713654d42ff0b6e9e0825b38e824f7b9f005

  //--------------------------------------------------------------------------------------------------------------------
  /** Gets real sql mode.
   */
  private function GetCorrectSqlMode()
  {
    $sql = sprintf( "set sql_mode ='%s'", $this->mySqlMode );
    SET_DL::ExecuteNone( $sql );

    $query = "select @@sql_mode;";
    $tmp = SET_DL::ExecuteRows( $query );
    $this->mySqlMode = $tmp[0]['@@sql_mode'];
  }

  //--------------------------------------------------------------------------------------------------------------------
  /** Drop obsolete routines (i.e. routines that exits in MySQL but for which we don't have a source file).
   */
  private function DropObsoleteRoutines()
  {
    foreach( $this->myOldRoutines as $old_routine )
    {
      if (!isset($this->myPsqlFileNames[$old_routine['routine_name']]))
      {
        echo sprintf( "Dropping %s %s\n",
                      strtolower( $old_routine['routine_type'] ),
                      $old_routine['routine_name'] );

        $sql = sprintf( "drop %s if exists %s", $old_routine['routine_type'], $old_routine['routine_name'] );
        SET_DL::ExecuteNone( $sql );
      }
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  public function Main( $theConfigFileName )
  {
    SET_DL::Connect( 'localhost', 'nahouw', 'nahouw', 'nahouw' );

    $this->ReadConfigFile( $theConfigFileName );
    $this->FindPsqlFiles();
    $this->GetColumnTypes();
    $this->ReadRoutineMetaData();
    $this->GetConstants();
    $this->GetOldRoutines();
    $this->GetCorrectSqlMode();

    foreach( $this->myPsqlFileNames as $this->myCurrentPsqlFileName )
    {
      $err = $this->LoadPsqlFile();
      if ($err===false)
      {
        $this->myErrorFileNames = $this->myCurrentPsqlFileName;
        unset($this->myMetadata[$this->myCurrentRoutineName]);
      }
    }

    // Drop obsolete routines.
    $this->DropObsoleteRoutines();

    // Remove metadata of store routines that have been removed.
    $this->RemoveObsoleteMetadata();

    // Write the metadata to @c $myMetadataFileName.
    $this->WriteRoutineMetadata();

    SET_DL::Disconnect();
  }

  //--------------------------------------------------------------------------------------------------------------------
}

//----------------------------------------------------------------------------------------------------------------------
function Synopsis()
{
  echo "routine_loader <configfile> [routine.psql]\n";
  exit(1);
}

//----------------------------------------------------------------------------------------------------------------------
if($argc!=2) Synopsis();

$loader = new SET_RoutineLoader;
$loader->Main( $argv[1] );

/** @todo
   * Implement 2 parameter for this program
   * Implement locking
   */
