#!/usr/bin/php
<?php
//----------------------------------------------------------------------------------------------------------------------
/**
 * phpStratum
 *
 * @copyright 2005-2015 Paul Water / Set Based IT Consultancy (https://www.setbased.nl)
 * @license   http://www.opensource.org/licenses/mit-license.php MIT
 * @link
 */
//----------------------------------------------------------------------------------------------------------------------
use SetBased\Affirm\Affirm;
use SetBased\Stratum\MySql\Constants;
use SetBased\Stratum\MySql\RoutineLoader;
use SetBased\Stratum\MySql\RoutineWrapperGenerator;

//----------------------------------------------------------------------------------------------------------------------
$files = [__DIR__.'/../vendor/autoload.php',
          __DIR__.'/../../vendor/autoload.php',
          __DIR__.'/../../../vendor/autoload.php',
          __DIR__.'/../../../../vendor/autoload.php'];

foreach ($files as $file)
{
  if (file_exists($file))
  {
    require $file;
    break;
  }
}

//----------------------------------------------------------------------------------------------------------------------
/**
 * Prints the synopsis of this program and terminates this program.
 */
function synopsis()
{
  echo "Synopsis: stratum [-f] -c <configuration file> [routine.psql] ... \n";
  echo "          stratum -h\n";

  exit(1);
}

//----------------------------------------------------------------------------------------------------------------------
/**
 * Parses the arguments of this program.
 *
 * @param array $options The arguments of this programs (i.e. $argv).
 *
 * @return array  The parameters.
 * @throws Exception
 */
function getSetting($options)
{
  // skip first key with current file name.
  array_shift($options);
  $setting['psql_files'] = [];
  while (($param = array_shift($options))!==null)
  {
    switch ($param)
    {
      case '-f':
      case '--fast':
        $setting['fast'] = true;
        break;

      case '-c':
      case '--config':
        $setting['config'] = array_shift($options);
        break;

      case '-h':
      case '--help':
        synopsis();
        break;

      default:
        $n = preg_match('([A-Za-z0-9\_/]+.psql)', $param, $regs);
        if ($n==1)
        {
          $setting['psql_files'][] = $regs[0];
        }
        else
        {
          synopsis();
        }
        break;
    }
  }

  if (!isset($setting['config'])) synopsis();

  return $setting;
}

//----------------------------------------------------------------------------------------------------------------------
/**
 * Returns the error string of the last json_encode() or json_decode() call.
 *
 * json_last_error_msg is defined in php 5.5.
 */
if (!function_exists('json_last_error_msg'))
{
  function json_last_error_msg()
  {
    static $errors = [
      JSON_ERROR_NONE           => null,
      JSON_ERROR_DEPTH          => 'Maximum stack depth exceeded',
      JSON_ERROR_STATE_MISMATCH => 'Underflow or the modes mismatch',
      JSON_ERROR_CTRL_CHAR      => 'Unexpected control character found',
      JSON_ERROR_SYNTAX         => 'Syntax error, malformed JSON',
      JSON_ERROR_UTF8           => 'Malformed UTF-8 characters, possibly incorrectly encoded'
    ];
    $error = json_last_error();

    return array_key_exists($error, $errors) ? $errors[$error] : "Unknown error ({$error})";
  }
}

//----------------------------------------------------------------------------------------------------------------------
/**
 * Starts the execution of this program.
 *
 * @param array $options The arguments of this programs (i.e. $argv).
 */
function main($options)
{
  // Throw exceptions on warnings and errors.
  Affirm::setErrorHandler();

  // Read the ini file.
  $setting = getSetting($options);

  if (isset($setting['fast']))
  {
    // Fast mode: only load stored routines.
    $loader = new RoutineLoader;
    $ret    = $loader->main($setting['config'], $setting['psql_files']);
    if ($ret!=0) exit($ret);
  }
  else
  {
    // Normal mode: create constants, config file, load routines, and create routine wrapper class.
    $constants = new Constants;
    $ret       = $constants->main($setting['config']);
    if ($ret!=0) exit($ret);

    $loader = new RoutineLoader;
    $ret    = $loader->main($setting['config'], $setting['psql_files']);
    if ($ret!=0) exit($ret);

    $wrapper = new RoutineWrapperGenerator;
    $ret     = $wrapper->run($setting['config']);
    if ($ret!=0) exit($ret);
  }

  exit(0);
}

//----------------------------------------------------------------------------------------------------------------------
main($argv);
