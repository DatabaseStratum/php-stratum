#!/usr/bin/php
<?php
//----------------------------------------------------------------------------------------------------------------------
/**
 * Throws an execption. Takes arguments similair to printf.
 */
function set_assert_failed()
{
  $args    = func_get_args();
  $format  = array_shift( $args );
  $message = vsprintf( $format,  $args );

  throw new Exception( $message );
}

//----------------------------------------------------------------------------------------------------------------------
/**
 * @param string $theMatadataFile The path to the file with metadata.
 *
 * @return array
 */
function readMetadata( $theMatadataFile )
{
  $metadata = array();
  $handle = fopen( $theMatadataFile, 'r' );
  if ($handle===false) set_assert_failed( "Unable to open file '%s'.", $theMatadataFile );

  // Ignore the header row.
  fgetcsv( $handle, 0, ',' );

  while ($row = fgetcsv( $handle, 0, ',' ))
  {
    $metadata[$row[0]] = array( 'routine_name' => $row[0],
                                'type'         => $row[1],
                                'columns'      => $row[2] );
  }

  $err = fclose( $handle );
  if ($err===false) set_assert_failed( "Error closing file '%s'.", $theMatadataFile );

  return $metadata;
}

//----------------------------------------------------------------------------------------------------------------------
/**
 * @param string $theSourceDir
 *
 * @return array
 */
function getPSQLList( $theSourceDir )
{
  $PSQLList = glob( "$theSourceDir/*.psql" );
  $FileList = scandir( $theSourceDir );

  foreach( $FileList as $FilePath )
  {
    if (is_dir( "$theSourceDir/$FilePath" ))
    {
      if ($FilePath!="."&&$FilePath!="..")
      {
        $DirList[] = $theSourceDir."/".$FilePath;
      }
    }
  }

  if (isset($DirList))
  {
    foreach ( $DirList as $DirPath )
    {
      $SubPSQLList = getPSQLList( $DirPath );
      $PSQLList = array_merge( $PSQLList, $SubPSQLList );
    }
  }

  return $PSQLList;
}

//----------------------------------------------------------------------------------------------------------------------
/**
 * @param string $theDirectoryName
 */
function createDestinationDir( $theDirectoryName )
{
  if (!is_dir( $theDirectoryName ))
  {
    $err = mkdir( $theDirectoryName, 0775, true );
    if ($err===false) set_assert_failed( "Ca not create directory '%s'.", $theDirectoryName );
  }

}

//----------------------------------------------------------------------------------------------------------------------
/**
 * @param string $theSource
 * @param string $theDestinationDir
 * @param array  $metadata
 * @param string $theSourceDir
 */
function processSourcFile( $theSource, $theDestinationDir, $metadata, $theSourceDir )
{
  $routine_name = basename( $theSource, '.psql' );

  if (!isset( $metadata[$routine_name] ))
  {
    echo "Warning: routine \"$routine_name\" not found in metadata.\n";

    return;
  }

  $output_file_name = $theDestinationDir.substr( $theSource, strlen(  $theSourceDir ) );

  createDestinationDir( dirname( $output_file_name ) );

  $source = file_get_contents( $theSource );
  if ($source===false) set_assert_failed( "Unable to read file '%s'.", $theSource );

  $input_lines = explode( "\n", $source );
  $output_lines = array();

  $mode_head  = true;
  $mode_body  = false;
  $mode_end   = false;
  $empty_line = false;
  foreach( $input_lines as $line )
  {
    if (substr( $line, 0, 7 )=='create ')
    {
      $mode_head = false;
      $mode_body = true;
    }

    if ($line=='end$$')
    {
      $mode_body = false;
      $mode_end  = true;
    }

    if ($mode_head)
    {
      $write_line = true;
      if (substr( $line, 0, 13 )=='set sql_mode ') $write_line = false;
      if (substr( $line, 0, 9 )=='set names')      $write_line = false;
      if (substr( $line, 0, 9 )=='delimiter')      $write_line = false;
      if (substr( $line, 0, 4 )=='drop')           $write_line = false;

      if (!$line)
      {
        if ($empty_line) $write_line = false;
        $empty_line = true;
      }

      if ($write_line)
      {
        $output_lines[] = $line;
        if ($line) $empty_line = false;
      }
    }

    if ($mode_body)
    {
      if ($line=="begin")
      {
        if (!empty( $metadata[$routine_name]['columns'] ))
        {
          $output_lines[] = "-- type: ".$metadata[$routine_name]['type']." ".$metadata[$routine_name]['columns'];
        }
        else
        {
          $output_lines[] = "-- type: ".$metadata[$routine_name]['type'];
        }
      }
      $output_lines[] = $line;
    }

    if ($mode_end)
    {
      if ($line=='end$$')
      {
        $output_lines[] = 'end';
      }
    }
  }

  $output = ltrim( implode( "\n", $output_lines ) )."\n";
  $err = file_put_contents( $output_file_name, $output );
  if ($err===false) set_assert_failed( "Error writing file '%s'.", $output_file_name );

}

//----------------------------------------------------------------------------------------------------------------------
/**
 * Show synopsis message.
 */
function synopsis()
{
  echo "Synopsis: wrapper_convert <metadata.cvs> <source dir> <destination dir>\n";
}

//----------------------------------------------------------------------------------------------------------------------
/**
 * @param string $theMetadatFileName
 * @param string $theSourceDir
 * @param string $theDestinationDir
 */
function wrapperConvert( $theMetadatFileName, $theSourceDir, $theDestinationDir )
{
  $theSources = getPSQLList( $theSourceDir );

  $metadata = readMetadata( $theMetadatFileName );

  foreach( $theSources as $theSource )
  {
    processSourcFile( $theSource, $theDestinationDir, $metadata, $theSourceDir );
  }
}

//----------------------------------------------------------------------------------------------------------------------
if ($argc!=4)
{
  synopsis();
  exit(1);
}

//----------------------------------------------------------------------------------------------------------------------
wrapperConvert( $argv[1], $argv[2], $argv[3] );

