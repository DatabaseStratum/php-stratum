<?xml version="1.0" encoding="UTF-8"?>
<project name="php-mysql-data-layer" default="build" basedir=".">
    <taskdef name="readSemanticVersion" classname="vendor.setbased.phing-extensions.src.Task.readSemanticVersionTask"/>
    <property name="VERSION" value="0.0.0"/>

    <target name="build">
        <echo message="noting to do."/>
    </target>

    <!-- Merges the current branch with a remote branch -->
    <target name="git-merge">
        <exec command="git rev-parse --abbrev-ref HEAD" outputProperty="CURRENT_BRANCH"/>
        <input message="Your current branch is '${CURRENT_BRANCH}'. Remote branch: " propertyName="BRANCH"/>
        <gitbranch branchname="temp" repository="."/>
        <gitcheckout repository="." branchname="temp"/>
        <gitpull repository="." refspec="${BRANCH}" quiet="false"/>
        <gitcheckout repository="." branchname="${CURRENT_BRANCH}"/>
        <gitmerge repository="." remote="temp"/>
        <gitbranch branchname="temp" repository="." delete="true"/>
    </target>

    <!-- Merges the current branch with a remote branch in two steps: step 1 -->
    <target name="git-merge1">
        <exec command="git rev-parse --abbrev-ref HEAD" outputProperty="CURRENT_BRANCH" checkreturn="true"/>
        <exec command="git fetch -p" passthru="true" checkreturn="true"/>
        <input message="Your current branch is '${CURRENT_BRANCH}'. Remote branch: " propertyName="BRANCH"/>
        <gitbranch branchname="temp" repository="."/>
        <gitcheckout repository="." branchname="temp"/>
        <gitpull repository="." refspec="${BRANCH}" quiet="false"/>
    </target>

    <!-- Merges the current branch with a remote branch in two steps: step 2 -->
    <target name="git-merge2">
        <exec command="git rev-parse --abbrev-ref HEAD" outputProperty="CURRENT_BRANCH" checkreturn="true"/>
        <input message="Your current branch is '${CURRENT_BRANCH}'. Branch: " propertyName="BRANCH"/>
        <gitcheckout repository="." branchname="${BRANCH}"/>
        <gitmerge repository="." remote="temp"/>
        <gitbranch branchname="temp" repository="." delete="true"/>
    </target>

    <!-- Creates a new version/release. -->
    <target name="version">
        <readSemanticVersion file=".version"
                             versionProperty="VERSION"
                             haltOnError="true"/>
        <gitcommit repository="." message="Release: ${VERSION}" allFiles="true"/>
        <gitpush repository="."/>
        <gittag repository="." name="${VERSION}"/>
        <gitpush repository="." refspec="${VERSION}" quiet="false"/>
    </target>

    <!-- Runs all unit tests -->
    <target name="unit">
        <delete file="etc/mysql/test_routines.json" quiet="true"/>
        <exec command="cat test/mysql/create_test.sql | mysql -utest -ptest test" passthru="true" checkreturn="true"/>
        <!-- Rename folder for test5() -->
        <move file="test/mysql/psql/rename" tofile="test/mysql/psql/ test_escape ' &quot; @ $ ! ." overwrite="true"/>
        <!--  -->
        <exec command="bin/stratum -c etc/mysql/test_stratum.cfg" passthru="true" checkreturn="true"/>
        <exec command="bin/phpunit --bootstrap=test/mysql/bootstrap.php test" passthru="true" checkreturn="true"/>
        <!-- Rename folder back for test5() -->
        <move file="test/mysql/psql/ test_escape ' &quot; @ $ ! ." tofile="test/mysql/psql/rename"  overwrite="true"/>
        <!--  -->
    </target>
</project>
